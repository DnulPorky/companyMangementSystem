package com.springboot2.companyManagementSystem.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.springboot2.companyManagementSystem.model.Employee;
import com.springboot2.companyManagementSystem.repository.EmployeeRepository;


/**
 * It's a convenience annotation that combines @Controller and @ResponseBody â€“ which eliminates 
 * the need to annotate every request handling method of the controller class with the @ResponseBody annotation.
 * Every request handling method of the controller class automatically serializes return objects into HttpResponse.
 * @Controller is simply a specialization of the @Component class and 
 * allows implementation classes to be autodetected through the classpath scanning.
 * A controller is a class that handles request and responds with informations of some sort(Spring MVC framework concept)
 */
@RestController
@RequestMapping("api/employee")
public class EmployeeController {
	/**
	 * @Autowired annotation allows Spring to resolve and inject collaborating beans into your bean.
	 */
	@Autowired
	EmployeeRepository employeeRepository;
	
	@GetMapping("/employees")
	public List<Employee> findAll() {
		return employeeRepository.findAll();
	}
	
	/**
	 * @ResponseEntity represents the whole HTTP response: status code, headers, and body. 
	 * We can use it to fully configure the HTTP response.
	 * @PathVariable is a Spring annotation which indicates that a method parameter should 
	 * be bound to a URI template variable.
	 */
	@GetMapping("/employees/{id	}")
	public ResponseEntity<Employee> getEmployeeById(@PathVariable(value = "id") Long employeeId) throws Exception{
		Employee employee = employeeRepository.findById(employeeId).orElseThrow(() -> new Exception("Employee not found for this id :: " + employeeId));
		return ResponseEntity.ok().body(employee);
	}
	@PostMapping("/employee")
	public Employee createEmployee(Employee employee) {
		return employeeRepository.save(employee);
	}
}
